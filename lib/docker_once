#!/bin/bash
# 船塢工人 - 單次執行


##shStyle ###


source shbase.redirection.sh
source shbase "#abase"


##shStyle ###


shScript_route() { return; }


##shStyle 共享變數


ysPath="$__ysBashPath"

dockershPath="$_dirsh/_dockersh"
dockershVolumePath="/dockersh"
onceTmpVolumePath="/app"

onceRunVolumePath="$dockershVolumePath/onceRun.sh"


##shStyle 介面函式


showHelpRecord "main" "\
船塢工人 - 單次執行
[[USAGE]] <命令參數 ...>
[[OPT]]
      --image <映像文件名稱>   建立環境的映像文件。
      --hostname <主機名稱>    容器的主機名稱。
      --user1000               以 \`--user 1000:1000\` 建立環境。 --home <家目錄參照路徑>   以 \`--volume <家目錄參照路徑>:<容器內用戶家目錄>\`
                               建立環境。
      --myhome                 同 \`--home \"\$HOME\"\`。
      --home-pick              個別掛載家目錄底下的子目錄。
                               (有指定 \`--home\`, \`--myhome\` 時有效)
      --dock                   掛載 \"/var/run/docker.sock\" 以啟用容器內的 docker 命令。
  -h, --help                   幫助。
"
fnOpt_main() {
    case "$1" in
        --image )
            [ -z "$2" ] && return 4

            opt_image=$2
            return 2
            ;;
        --hostname )
            [ -z "$2" ] && return 4

            opt_hostname=$2
            return 2
            ;;
        --user1000 )
            opt_user1000=1
            return 1
            ;;
        --home )
            [ -z "$2" ] && return 4

            opt_home=`realpath "$2"`
            return 2
            ;;
        --myhome )
            opt_home="$HOME"
            return 1
            ;;
        --home-pick )
            opt_homePick=1
            return 1
            ;;
        --dock )
            opt_dock=1
            return 1
            ;;
        -h | --help ) showHelp "$_fileName" ;;
        * )
            if [ -z "$2" ]; then
                opt_carryOpt[${#opt_carryOpt[@]}]=$1
                return 1
            else
                opt_carryOpt[${#opt_carryOpt[@]}]=$1
                opt_carryOpt[${#opt_carryOpt[@]}]=$2
                return 2
            fi
            ;;
    esac
}
fnSh_main() {
    opt_image=""
    opt_hostname="`cat /etc/hostname`-vm"
    opt_user1000=0
    opt_home=""
    opt_homePick=0
    opt_dock=0
    opt_carryOpt=()
    parseOption "$_fileName"

    if [ -z "$opt_image" ]; then
        echo "未提供 \`--image\` 映像文件名稱。" \
            | loxog -f "$_fileName" --stderr err
        exit 1
    fi

    local dockerCmdList=("docker" "run" "--rm" "-it")

    dockerCmdList+=("--hostname" "$opt_hostname")

    if [ $opt_user1000 -eq 1 ]; then
        dockerCmdList+=("--user" "1000:1000")
    fi

    # 有 "^M" 特殊字符問題
    local containerHome=`"${dockerCmdList[@]}" "${opt_carryOpt[@]}" "$opt_image" "sh" "-c" 'echo $HOME' | tr -d '\r'`
    loxog -f "$_fileName" com "User Home (in container): $containerHome"

    local key line
    local dvPath=() # defaultVolumePath=()

    dvPath+=("$dockershPath:$dockershVolumePath")

    local containerYsPath projectVolumePath
    local projectPath="$_PWD"
    local projectDirPath="$_PWD/" # 有無 "/" 不影響程式運行，僅是維持一致性而已
    local ynVolumeOnceProject=1
    if [ -n "$opt_home" ]; then
        if [ "$opt_homePick" -eq 1 ]; then
            while read line
            do
                [ ! "$line" == "ys" ] || continue
                [ ! "$line" == ".ys"  ] || continue
                dvPath+=("$opt_home/$line:$containerHome/$line")
            done <<< "`lsFile "$opt_home"`"
        else
            dvPath+=("$opt_home:$containerHome")
        fi

        # 以 `sudo` 執行會使 `$ysPath` 的原始家目錄與 `$HOME` ("/root") 不同調
        # 故不能使用 `${ysPath:$((${#HOME} + 1))}` 命令來判斷
        containerYsPath="$containerHome/ys"
        dvPath+=("$ysPath:$containerYsPath")

        if [ "${projectDirPath::$((${#ysPath} + 1))}" == "${ysPath}/" ]; then
            ynVolumeOnceProject=0
            projectVolumePath="$containerHome/${projectPath:$((${#HOME} + 1))}"
        fi
    fi
    if [ $ynVolumeOnceProject -eq 1 ]; then
        projectVolumePath="$onceTmpVolumePath"
        dvPath+=("$projectPath:$projectVolumePath")
    fi

    if [ $opt_dock -eq 1 ]; then
        dockerCmdList+=("--volume" "/var/run/docker.sock:/var/run/docker.sock")
    fi

    for key in "${dvPath[@]}"
    do
        dockerCmdList+=("--volume" "$key")
    done

    for key in "${opt_carryOpt[@]}"
    do
        dockerCmdList+=("$key")
    done

    dockerCmdList+=("$opt_image")

    dockerCmdList+=("$onceRunVolumePath" "--cd" "$projectVolumePath")
    [ -z "$containerYsPath" ] || dockerCmdList+=("--ysPath" "$containerYsPath")

    for key in "${_args[@]}"
    do
        dockerCmdList+=("$key")
    done

    loxog -f "$_fileName" com "\$ ${dockerCmdList[*]}<ENTER>"
    exec "${dockerCmdList[@]}"
}


##shStyle 函式庫



##shStyle ###


shScript "main" "$@"

